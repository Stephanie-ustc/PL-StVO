[SVO]
parallel    	= false
points      	= true
lines       	= true
uncertainty 	= true
overlap     	= false
erode       	= true
[PointTracking]
minDist12       = 0.1;          // min descriptor distance (threshold)
maxStDist       = 0;            // max error in the y coordinate for the stereo correspondences
maxF2FDisp      = 0.04;         // max disparity (in proportion to the resolution) between the L-L and R-R correspondences in the F2F tracking
nFeatures       = 500;          // max number of detected features
nLevels         = 1;            // number of levels
scaleFactor     = 1.2;          // pyramid decimation ratio
dispMin         = 1.;           // min disparity value (avoid points in the infinite)
[LineTracking]
scale           = 1;            // scale for the LSD detector
nOctaves        = 1;            // number of octaves where the lines are detected
matchTh         = 40;           // match threshold
matchDist       = 10;           // min distance between the best match and the next one
dispMax         = 1000;         // Max. disparity to filter outliers in the stereo matching (pixels)
alphaMax        = 10;           // Max. angle to filter outliers in the stereo matching (degrees)
horizTh         = 0.5;          // Parameter to remove the horizontal lines (pixels)
flowTh          = 1000;         // Flow Optical Vector threshold for the frame2frame matching (pixels)
alphaTh         = 10;           // Angle threshold for the frame2frame matching (degrees)
matchPr         = 0.6;          // Probability of inlier
[PoseOptimization]
maxIters    	= 4;    	// Max number of iterations
minError        = 0.0001;       // Min error to leave the iterative optimization
minErrorChange  = 0.0001;       // Min error change to leave the iterative optimization
[ERODE]
maxItersH   	= 4;    	// Max number of ERODE iterations
minErrorH       = 0.0001;       // Min error to leave the iterative robust optimization
minErrorChangeH = 0.0001;       // Min error change to leave the iterative robust optimization
huberTh         = 0.5;          // Parameter to obtain the Huber threshold and filter the outliers
huberKL         = 1.5;          // Parameter to obtain the Huber threshold and filter the outliers
huberKP         = 2.5;          // Parameter to obtain the Huber threshold and filter the outliers
b               = 1.5;          // Pseudo-Huber Loss Function parameter
[BumblebeeGrabber]
width	    	= 320;  	// 160 256 320 400 512 640
height	    	= 240;  	// 120 192 240 300 384 480
framerate       = FRAMERATE_20; // Frame rate of the bumblebee camera
[Scene]
hasGT      	= false
hasChange  	= false
hasComparison 	= false
hasText    	= true
hasAxes         = true
hasLegend       = true
hasHelp		= false
hasTraj		= true
hasCov	   	= true
hasImg     	= false
hasLines   	= false
hasPoints  	= false
hasFrustum 	= false
selli      	= 1.0;
isKitti  	= false
